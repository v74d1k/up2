import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import requests

TOKEN = "7686244392:AAGge7CFIYo_hoVZ4xAmQT0wx8zpGFYu20c"
OWM_API_KEY = "b86ad5169d6cfe6f60b6578deaf006f5"

landmarks = {
    "chekhov": {
        "name": "–ü–∞–º—è—Ç–Ω–∏–∫ –ß–µ—Ö–æ–≤—É",
        "description": "–ü–∞–º—è—Ç–Ω–∏–∫ –ê–Ω—Ç–æ–Ω—É –ü–∞–≤–ª–æ–≤–∏—á—É –ß–µ—Ö–æ–≤—É –Ω–∞ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –¢–æ–º–∏.",
        "address": "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏ –¢–æ–º–∏",
        "photo": "https://example.com/chekhov.jpg"
    },
    "wooden": {
        "name": "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∑–æ–¥—á–µ—Å—Ç–≤–æ",
        "description": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –¥–æ–º–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –¢–æ–º—Å–∫–∞.",
        "address": "–£–ª–∏—Ü—ã –ë–µ–ª–∏–Ω—Å–∫–æ–≥–æ –∏ –ö—Ä–∞—Å–Ω–æ–∞—Ä–º–µ–π—Å–∫–∞—è"
    }
}

routes = {
    "historic": {
        "name": "–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç",
        "description": "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ —Å—Ç–∞—Ä–∏–Ω–Ω—ã–º —É–ª–∏—Ü–∞–º –¢–æ–º—Å–∫–∞ —Å –ø–æ—Å–µ—â–µ–Ω–∏–µ–º –≥–ª–∞–≤–Ω—ã—Ö –ø–∞–º—è—Ç–Ω–∏–∫–æ–≤.",
        "stops": ["–ü–∞–º—è—Ç–Ω–∏–∫ –ß–µ—Ö–æ–≤—É", "–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –∑–æ–¥—á–µ—Å—Ç–≤–æ", "–¢–æ–º—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"]
    },
    "nature": {
        "name": "–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç",
        "description": "–ú–∞—Ä—à—Ä—É—Ç –ø–æ –ø–∞—Ä–∫–∞–º –∏ –Ω–∞–±–µ—Ä–µ–∂–Ω—ã–º –¢–æ–º—Å–∫–∞ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –ø—Ä–∏—Ä–æ–¥—ã.",
        "stops": ["–ü–∞—Ä–∫ 400-–ª–µ—Ç–∏—è –¢–æ–º—Å–∫–∞", "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è —Ä–µ–∫–∏ –¢–æ–º–∏"]
    }
}

cafes = {
    "coffee_house": {
        "name": "Coffee House",
        "description": "–£—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ —Å –æ—Ç–ª–∏—á–Ω—ã–º –∫–æ—Ñ–µ –∏ –¥–µ—Å–µ—Ä—Ç–∞–º–∏.",
        "address": "—É–ª. –ë–µ–ª–∏–Ω—Å–∫–æ–≥–æ, 15"
    },
    "vegan_place": {
        "name": "Vegan Place",
        "description": "–í–µ–≥–∞–Ω—Å–∫–æ–µ –∫–∞—Ñ–µ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º –º–µ–Ω—é.",
        "address": "–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 30"
    }
}

info = {
    "transport": "–í –¢–æ–º—Å–∫–µ —Ö–æ–¥—è—Ç –∞–≤—Ç–æ–±—É—Å—ã, —Ç—Ä–æ–ª–ª–µ–π–±—É—Å—ã –∏ –º–∞—Ä—à—Ä—É—Ç–∫–∏. –ë–∏–ª–µ—Ç—ã –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –∫–∞—Å—Å–∞—Ö –∏ —É –≤–æ–¥–∏—Ç–µ–ª—è.",
    "emergency": "–¢–µ–ª–µ—Ñ–æ–Ω —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É–∂–±: 112",
    "tourist_center": "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –¢–æ–º—Å–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–ª. –õ–µ–Ω–∏–Ω–∞, 5."
}

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üå§Ô∏è –ü–æ–≥–æ–¥–∞", callback_data='weather')],
        [InlineKeyboardButton("üìç –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data='landmarks')],
        [InlineKeyboardButton("üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã", callback_data='routes')],
        [InlineKeyboardButton("‚òï –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã", callback_data='cafes')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')]
    ])

def landmarks_menu_keyboard():
    buttons = [[InlineKeyboardButton(info["name"], callback_data=f"landmark_{key}")] for key, info in landmarks.items()]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    return InlineKeyboardMarkup(buttons)

def routes_menu_keyboard():
    buttons = [[InlineKeyboardButton(info["name"], callback_data=f"route_{key}")] for key, info in routes.items()]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    return InlineKeyboardMarkup(buttons)

def cafes_menu_keyboard():
    buttons = [[InlineKeyboardButton(info["name"], callback_data=f"cafe_{key}")] for key, info in cafes.items()]
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')])
    return InlineKeyboardMarkup(buttons)

def info_menu_keyboard():
    buttons = [
        [InlineKeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data='info_transport')],
        [InlineKeyboardButton("–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã", callback_data='info_emergency')],
        [InlineKeyboardButton("–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä", callback_data='info_tourist_center')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(buttons)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–æ–º—Å–∫–∏–π –ì–∏–¥! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'main_menu':
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç:", reply_markup=main_menu_keyboard())
    elif data == 'weather':
        weather_text = get_weather_text()
        await query.edit_message_text(weather_text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]]))
    elif data == 'landmarks':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=landmarks_menu_keyboard())
    elif data.startswith('landmark_'):
        key = data.split('_')[1]
        info_item = landmarks.get(key)
        if info_item:
            text = f"{info_item['name']}\n\n{info_item['description']}\n–ê–¥—Ä–µ—Å: {info_item['address']}"
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='landmarks')]]))
        else:
            await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=landmarks_menu_keyboard())
    elif data == 'routes':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=routes_menu_keyboard())
    elif data.startswith('route_'):
        key = data.split('_')[1]
        info_item = routes.get(key)
        if info_item:
            stops = "\n".join(info_item["stops"])
            text = f"{info_item['name']}\n\n{info_item['description']}\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:\n{stops}"
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='routes')]]))
        else:
            await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=routes_menu_keyboard())
    elif data == 'cafes':
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ñ–µ –∏–ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω:", reply_markup=cafes_menu_keyboard())
    elif data.startswith('cafe_'):
        key = data.split('_')[1]
        info_item = cafes.get(key)
        if info_item:
            text = f"{info_item['name']}\n\n{info_item['description']}\n–ê–¥—Ä–µ—Å: {info_item['address']}"
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='cafes')]]))
        else:
            await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=cafes_menu_keyboard())
    elif data == 'info':
        await query.edit_message_text("–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", reply_markup=info_menu_keyboard())
    elif data == 'info_transport':
        await query.edit_message_text(info["transport"], reply_markup=info_menu_keyboard())
    elif data == 'info_emergency':
        await query.edit_message_text(info["emergency"], reply_markup=info_menu_keyboard())
    elif data == 'info_tourist_center':
        await query.edit_message_text(info["tourist_center"], reply_markup=info_menu_keyboard())

def get_weather_text():
    try:
        url = f"http://api.openweathermap.org/data/2.5/weather?q=Tomsk&appid={OWM_API_KEY}&units=metric&lang=ru"
        response = requests.get(url).json()
        temp = response["main"]["temp"]
        desc = response["weather"][0]["description"]
        wind = response["wind"]["speed"]
        humidity = response["main"]["humidity"]
        return f"–ü–æ–≥–æ–¥–∞ –≤ –¢–æ–º—Å–∫–µ:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {desc}\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

if __name__ == '__main__':
    main()
